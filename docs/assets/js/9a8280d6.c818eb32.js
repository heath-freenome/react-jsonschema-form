"use strict";(globalThis.webpackChunk_rjsf_docs=globalThis.webpackChunk_rjsf_docs||[]).push([[2877],{9098:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"4.2.3","label":"v4","banner":"unmaintained","badge":true,"noIndex":false,"className":"docs-version-4.2.3","isLast":false,"docsSidebars":{"docs":[{"type":"link","href":"/react-jsonschema-form/docs/version-4.2.3/quickstart","label":"Quickstart","docId":"quickstart","unlisted":false},{"type":"category","label":"Advanced Customization","collapsible":true,"collapsed":true,"items":[{"type":"link","href":"/react-jsonschema-form/docs/version-4.2.3/advanced-customization/custom-templates","label":"Custom Templates","docId":"advanced-customization/custom-templates","unlisted":false},{"type":"link","href":"/react-jsonschema-form/docs/version-4.2.3/advanced-customization/custom-themes","label":"Custom Themes","docId":"advanced-customization/custom-themes","unlisted":false},{"type":"link","href":"/react-jsonschema-form/docs/version-4.2.3/advanced-customization/custom-widgets-fields","label":"Custom Widgets and Fields","docId":"advanced-customization/custom-widgets-fields","unlisted":false},{"type":"link","href":"/react-jsonschema-form/docs/version-4.2.3/advanced-customization/internals","label":"Internals","docId":"advanced-customization/internals","unlisted":false},{"type":"category","label":"material-ui","collapsible":true,"collapsed":true,"items":[{"type":"link","href":"/react-jsonschema-form/docs/version-4.2.3/advanced-customization/material-ui/customizing-material-ui","label":"Customizing material-ui fields and widgets","docId":"advanced-customization/material-ui/customizing-material-ui","unlisted":false}]}],"href":"/react-jsonschema-form/docs/version-4.2.3/advanced-customization/"},{"type":"category","label":"API Reference","collapsible":true,"collapsed":true,"items":[{"type":"link","href":"/react-jsonschema-form/docs/version-4.2.3/api-reference/form-props","label":"<Form /> props","docId":"api-reference/form-props","unlisted":false},{"type":"category","label":"themes","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"chakra-ui","collapsible":true,"collapsed":true,"items":[{"type":"link","href":"/react-jsonschema-form/docs/version-4.2.3/api-reference/themes/chakra-ui/uiSchema","label":"uiSchema Options for Chakra-UI","docId":"api-reference/themes/chakra-ui/uiSchema","unlisted":false}]},{"type":"category","label":"semantic-ui","collapsible":true,"collapsed":true,"items":[{"type":"link","href":"/react-jsonschema-form/docs/version-4.2.3/api-reference/themes/semantic-ui/uiSchema","label":"uiSchema Options for Semantic-UI","docId":"api-reference/themes/semantic-ui/uiSchema","unlisted":false}]}]},{"type":"link","href":"/react-jsonschema-form/docs/version-4.2.3/api-reference/uiSchema","label":"uiSchema","docId":"api-reference/uiSchema","unlisted":false}],"href":"/react-jsonschema-form/docs/version-4.2.3/api-reference/"},{"type":"category","label":"Usage and Customization","collapsible":true,"collapsed":true,"items":[{"type":"link","href":"/react-jsonschema-form/docs/version-4.2.3/usage/arrays","label":"Arrays","docId":"usage/arrays","unlisted":false},{"type":"link","href":"/react-jsonschema-form/docs/version-4.2.3/usage/definitions","label":"Schema definitions and references","docId":"usage/definitions","unlisted":false},{"type":"link","href":"/react-jsonschema-form/docs/version-4.2.3/usage/dependencies","label":"Dependencies","docId":"usage/dependencies","unlisted":false},{"type":"link","href":"/react-jsonschema-form/docs/version-4.2.3/usage/objects","label":"Objects","docId":"usage/objects","unlisted":false},{"type":"link","href":"/react-jsonschema-form/docs/version-4.2.3/usage/oneof","label":"oneOf, anyOf, and allOf","docId":"usage/oneof","unlisted":false},{"type":"link","href":"/react-jsonschema-form/docs/version-4.2.3/usage/single","label":"Single fields","docId":"usage/single","unlisted":false},{"type":"link","href":"/react-jsonschema-form/docs/version-4.2.3/usage/themes","label":"Themes","docId":"usage/themes","unlisted":false},{"type":"link","href":"/react-jsonschema-form/docs/version-4.2.3/usage/validation","label":"Validation","docId":"usage/validation","unlisted":false},{"type":"link","href":"/react-jsonschema-form/docs/version-4.2.3/usage/widgets","label":"Widgets","docId":"usage/widgets","unlisted":false}],"href":"/react-jsonschema-form/docs/version-4.2.3/usage/"}]},"docs":{"advanced-customization/custom-templates":{"id":"advanced-customization/custom-templates","title":"Custom Templates","description":"This is an advanced feature that lets you customize even more aspects of the form:","sidebar":"docs"},"advanced-customization/custom-themes":{"id":"advanced-customization/custom-themes","title":"Custom Themes","description":"The withTheme component provides an easy way to extend the functionality of react-jsonschema-form by passing in a theme object that defines custom/overridden widgets and fields, as well as any of the other possible properties of the standard rjsf Form component. This theme-defining object is passed as the only parameter to the HOC (withTheme(ThemeObj)), and the HOC will return a themed-component which you use instead of the standard Form component.","sidebar":"docs"},"advanced-customization/custom-widgets-fields":{"id":"advanced-customization/custom-widgets-fields","title":"Custom Widgets and Fields","description":"The API allows to specify your own custom widget and field components:","sidebar":"docs"},"advanced-customization/index":{"id":"advanced-customization/index","title":"Advanced Customization","description":"Advanced customization documentation for react-jsonschema-form.","sidebar":"docs"},"advanced-customization/internals":{"id":"advanced-customization/internals","title":"Internals","description":"Miscellaneous internals of react-jsonschema-form are listed here.","sidebar":"docs"},"advanced-customization/material-ui/customizing-material-ui":{"id":"advanced-customization/material-ui/customizing-material-ui","title":"Customizing material-ui fields and widgets","description":"Unlike most other themes, the material-ui theme supports the two distinct version of Material UI (versions 4 and 5) side-by-side.","sidebar":"docs"},"api-reference/form-props":{"id":"api-reference/form-props","title":"<Form /> props","description":"acceptcharset","sidebar":"docs"},"api-reference/index":{"id":"api-reference/index","title":"API Reference","description":"API documentation for react-jsonschema-form.","sidebar":"docs"},"api-reference/themes/chakra-ui/uiSchema":{"id":"api-reference/themes/chakra-ui/uiSchema","title":"uiSchema Options for Chakra-UI","description":"When using @rjsf/chakra-ui there are a couple of ways to customize the feel of the form.","sidebar":"docs"},"api-reference/themes/semantic-ui/uiSchema":{"id":"api-reference/themes/semantic-ui/uiSchema","title":"uiSchema Options for Semantic-UI","description":"There are various options to pass to semantic theme fields.","sidebar":"docs"},"api-reference/uiSchema":{"id":"api-reference/uiSchema","title":"uiSchema","description":"JSON Schema is limited for describing how a given data type should be rendered as a form input component. That\'s why this library introduces the concept of uiSchema.","sidebar":"docs"},"quickstart":{"id":"quickstart","title":"Quickstart","description":"Let\'s walk through setup of a form after installing the dependency properly.","sidebar":"docs"},"usage/arrays":{"id":"usage/arrays","title":"Arrays","description":"Arrays are defined with a type equal to array, and array items\' schemas are specified in the items keyword.","sidebar":"docs"},"usage/definitions":{"id":"usage/definitions","title":"Schema definitions and references","description":"This library partially supports inline schema definition dereferencing, which is Barbarian for avoiding to copy and paste commonly used field schemas:","sidebar":"docs"},"usage/dependencies":{"id":"usage/dependencies","title":"Dependencies","description":"react-jsonschema-form supports the dependencies keyword from an earlier draft of JSON Schema (note that this is not part of the latest JSON Schema spec, though). Dependencies can be used to create dynamic schemas that change fields based on what data is entered.","sidebar":"docs"},"usage/index":{"id":"usage/index","title":"Usage and Customization","description":"How to use react-jsonschema-form and customize your form behavior and appearance.","sidebar":"docs"},"usage/objects":{"id":"usage/objects","title":"Objects","description":"Object properties","sidebar":"docs"},"usage/oneof":{"id":"usage/oneof","title":"oneOf, anyOf, and allOf","description":"react-jsonschema-form supports custom widgets for oneOf, anyOf, and allOf.","sidebar":"docs"},"usage/single":{"id":"usage/single","title":"Single fields","description":"The simplest example of a JSON Schema contains only a single field. The field type is determined by the type parameter.","sidebar":"docs"},"usage/themes":{"id":"usage/themes","title":"Themes","description":"By default, this library renders form fields and widgets leveraging the Bootstrap semantics,","sidebar":"docs"},"usage/validation":{"id":"usage/validation","title":"Validation","description":"When the form is submitted, the form data is validated to conform to the given JSON schema; this library uses the ajv validator by default.","sidebar":"docs"},"usage/widgets":{"id":"usage/widgets","title":"Widgets","description":"The uiSchema ui:widget property tells the form which UI widget should be used to render a field.","sidebar":"docs"}}}}')}}]);